/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/ai/v1/chat/completions": {
    /**
     * Create a chat completion
     * @description Creates a completion for the chat message. Supports both streaming and non-streaming responses.
     * The last message must be from the user role.
     */
    post: operations["createChatCompletion"];
  };
  "/ai/v1/classification/extraction": {
    /**
     * Extract entities from text
     * @description Extracts entities from the provided text content using AI models and database lookups.
     * Supports various entity types and can return similar entities based on the extracted names.
     */
    post: operations["extractEntities"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    APIError: {
      /**
       * @description Error message when something goes wrong
       * @example Internal server error, please try again
       */
      error: string;
    };
    /** @description Standard response wrapper with additional metadata */
    APIResponseWithMetadata: {
      /** @description Response payload */
      data: Record<string, never>;
      /** @description Error message if request failed */
      error?: string;
      /** @description Additional metadata about the response */
      metadata?: Record<string, never>;
    };
    ChatCompletionMessage: {
      /** @description The message content */
      content: string;
      /**
       * @description The role of the message sender
       * @enum {string}
       */
      role: "system" | "user" | "assistant";
    };
    ChatCompletionRequest: {
      /** @description Array of messages in the conversation */
      messages: components["schemas"]["ChatCompletionMessage"][];
      /**
       * @description Desired format of the response
       * @enum {string}
       */
      response_format?: "text" | "json" | "markdown";
      /**
       * @description Whether to stream the response
       * @default false
       */
      stream?: boolean;
      /**
       * @description Controls how verbose the response should be
       * @enum {string}
       */
      verbosity?: "concise" | "normal" | "detailed";
    };
    ChatCompletionResponse: {
      /** @description Array of response messages */
      messages: components["schemas"]["ChatCompletionMessage"][];
    };
    ChatCompletionResponseMetadata: {
      /** @description Current status of the chat completion */
      status: string;
    };
    Entity: {
      /**
       * Format: float
       * @description Confidence score of the entity match
       */
      confidence?: number;
      /** @description Unique identifier for the entity */
      id?: string;
      /** @description Name of the entity */
      name?: string;
      type?: components["schemas"]["EntityType"];
    };
    /**
     * @description Type of entity being extracted or referenced
     * @enum {string}
     */
    EntityType: "acquired_entity" | "acquiring_entity" | "asset" | "x_user" | "funded_entity" | "investor" | "network" | "person" | "exchange" | "organization" | "project" | "protocol" | "nft_collection";
    ExtractRequest: {
      /**
       * @description Whether to return all similar entities or just the best matches
       * @default false
       */
      allSimilarEntities?: boolean;
      /** @description Text content to extract entities from */
      content: string;
      /** @description Types of entities to extract */
      entityTypes?: components["schemas"]["EntityType"][];
    };
    ExtractResponse: {
      /** @description List of extracted entities with their matches */
      extractedEntities: components["schemas"]["GroupedEntity"][];
    };
    ExtractResponseMetadata: {
      /** @description Current status of the extraction request */
      status?: string;
    };
    GroupedEntity: {
      /** @description The name extracted from the content */
      extractedName?: string;
      /** @description The selected/best matching entity if available */
      selectedEntity?: components["schemas"]["Entity"];
      /** @description List of similar entities found */
      similarEntities?: components["schemas"]["Entity"][];
    };
  };
  responses: never;
  parameters: {
    /** @description API key for authentication */
    apiKey: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Create a chat completion
   * @description Creates a completion for the chat message. Supports both streaming and non-streaming responses.
   * The last message must be from the user role.
   */
  createChatCompletion: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatCompletionRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ChatCompletionResponse"];
            metadata?: components["schemas"]["ChatCompletionResponseMetadata"];
          };
          "text/event-stream": string;
        };
      };
    };
  };
  /**
   * Extract entities from text
   * @description Extracts entities from the provided text content using AI models and database lookups.
   * Supports various entity types and can return similar entities based on the extracted names.
   */
  extractEntities: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtractRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["ExtractResponse"];
            metadata?: components["schemas"]["ExtractResponseMetadata"];
          };
        };
      };
    };
  };
};
