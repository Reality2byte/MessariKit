/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/intel/v1/assets": {
    /**
     * Get all assets
     * @description Returns a list of assets.
     * Supports pagination and filtering by name or symbol.
     */
    get: operations["getAllAssets"];
  };
  "/intel/v1/events": {
    /**
     * Get all events
     * @description Returns a list of events based on the provided filters.
     * Supports pagination and filtering by various parameters.
     */
    post: operations["getAllEvents"];
  };
  [path: `/intel/v1/events/${string}`]: {
    /**
     * Get event and its history
     * @description Returns a specific event by ID along with its history.
     */
    get: operations["getEventAndHistory"];
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: {
    APIError: {
      /**
       * @description Error message when something goes wrong
       * @example Internal server error, please try again
       */
      error: string;
    };
    /**
     * @description Standard response wrapper with additional metadata.
     * This type should be treated as generic in TypeScript: APIResponseWithMetadata<T, M>.
     * T represents the data type, M represents the metadata type.
     */
    APIResponseWithMetadata: {
      /** @description Response payload */
      data: Record<string, never>;
      /** @description Error message if request failed */
      error?: string;
      /** @description Additional metadata about the response */
      metadata?: Record<string, never>;
    };
    Asset: {
      /** @description Unique identifier for the asset */
      id: string;
      /** @description Name of the asset */
      name: string;
      /** @description Slug of the asset */
      slug: string;
      /** @description Symbol of the asset */
      symbol: string;
    };
    Event: {
      /** @description Block number when the event activates */
      activationBlock?: number | null;
      /** @description Category of the event */
      category: string;
      /** @description Date when the event occurred or will occur */
      eventDate?: string | null;
      /** @description Detailed description of the event */
      eventDetails: string;
      /** @description Name of the event */
      eventName: string;
      /** @description Whether the event is global */
      globalEvent: boolean;
      /** @description Unique identifier for the event */
      id: string;
      /** @description Importance level of the event */
      importance: string;
      /** @description Primary assets related to the event */
      primaryAssets: components["schemas"]["Asset"][];
      /** @description Resources related to the event */
      resources?: components["schemas"]["Resource"][];
      /** @description Secondary assets related to the event */
      secondaryAssets?: components["schemas"]["Asset"][];
      /** @description Current status of the event */
      status: string;
      /** @description Subcategory of the event */
      subcategory: string;
      /**
       * Format: date-time
       * @description Date when the event was submitted
       */
      submissionDate: string;
      /** @description Tag associated with the event */
      tag: string;
      /** @description Details about the latest update to the event */
      updateDetails?: string | null;
    };
    EventHistory: {
      /** @description Importance level at this point in history */
      importance: string;
      /** @description Status at this point in history */
      status: string;
      /**
       * Format: date-time
       * @description Date when the history entry was submitted
       */
      submissionDate: string;
      /** @description Details about the update */
      updateDetails?: string | null;
    };
    GetAllEventsRequest: {
      /** @description Filter by categories */
      category?: string[];
      /**
       * Format: date-time
       * @description Filter events before this time
       */
      endTime?: string;
      /** @description Filter by whether the event is global */
      globalEvent?: boolean | null;
      /** @description Filter by importance levels */
      importance?: string[];
      /**
       * @description Number of items per page
       * @default 20
       */
      limit?: number;
      /**
       * @description Page number for pagination
       * @default 1
       */
      page?: number;
      /** @description Filter by primary assets */
      primaryAssets?: string[];
      /** @description Filter by assets that are either primary or secondary */
      primaryOrSecondaryAssets?: string[];
      /** @description Filter by secondary assets */
      secondaryAssets?: string[];
      /**
       * Format: date-time
       * @description Filter events after this time
       */
      startTime?: string;
      /** @description Filter by status */
      status?: string[];
      /** @description Filter by subcategories */
      subcategory?: string[];
      /** @description Filter by tags */
      tag?: string[];
    };
    GetEventResponse: {
      /** @description The event details */
      event: components["schemas"]["Event"];
      /** @description History of the event */
      eventHistory: components["schemas"]["EventHistory"][];
    };
    PaginationResult: {
      /** @description Number of items per page */
      limit: number;
      /** @description Current page number */
      page: number;
      /** @description Total number of pages */
      totalPages: number;
      /** @description Total number of items */
      totalRows: number;
    };
    Resource: {
      /** @description Title of the resource */
      title?: string;
      /**
       * Format: uri
       * @description URL of the resource
       */
      url?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description API key for authentication */
    apiKey: string;
    /** @description Number of items per page */
    limit?: number;
    /** @description Page number for pagination (1-based) */
    page?: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = {

  /**
   * Get all assets
   * @description Returns a list of assets.
   * Supports pagination and filtering by name or symbol.
   */
  getAllAssets: {
    parameters: {
      query?: {
        page?: components["parameters"]["page"];
        limit?: components["parameters"]["limit"];
        /** @description Filter by asset symbols (comma-separated) */
        symbol?: string;
        /** @description Filter by asset names (comma-separated) */
        name?: string;
      };
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Asset"][];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get all events
   * @description Returns a list of events based on the provided filters.
   * Supports pagination and filtering by various parameters.
   */
  getAllEvents: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetAllEventsRequest"];
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["Event"][];
            metadata?: components["schemas"]["PaginationResult"];
          };
        };
      };
    };
  };
  /**
   * Get event and its history
   * @description Returns a specific event by ID along with its history.
   */
  getEventAndHistory: {
    parameters: {
      header: {
        "x-messari-api-key": components["parameters"]["apiKey"];
      };
      path: {
        /** @description ID of the event to retrieve */
        eventId: string;
      };
    };
    responses: {
      /** @description Client error response */
      "4XX": {
        content: {
          "application/json": components["schemas"]["APIError"];
        };
      };
      /** @description Successful response */
      200: {
        content: {
          "application/json": components["schemas"]["APIResponseWithMetadata"] & {
            data?: components["schemas"]["GetEventResponse"];
          };
        };
      };
    };
  };
};
